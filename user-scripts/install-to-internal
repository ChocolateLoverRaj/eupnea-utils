#!/usr/bin/env python3
import argparse
import json
import os
import sys

sys.path.insert(0, "/usr/lib/eupnea")
from functions import *


# parse arguments from the cli.
def process_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--ignore-internal", dest="ignore_internal", action="store_true",
                        help="Skip internal check")
    return parser.parse_args()


if __name__ == "__main__":
    args = process_args()

    # Restart script as root
    if os.geteuid() != 0:
        sudo_args = ['sudo', sys.executable] + sys.argv + [os.environ]
        os.execlpe('sudo', *sudo_args)

    set_verbose(True)  # always run verbose

    # check if already on an internal install
    with open("/etc/eupnea.json", "r") as file:
        eupnea_config = json.load(file)
    if eupnea_config["install_type"] in ["internal", "expanded-internal"] and not args.ignore_internal:
        print_error("Already on an internal install")
        print_status("Run with --ignore-internal to skip this check")
        exit(1)

    # get internal storage name
    while True:
        storage_array = []
        lsblk_out = bash("lsblk -nd -o NAME,MODEL,SIZE,TRAN").splitlines()
        for line in lsblk_out:
            if line.find("mmcblk") != -1 or line.find("nvme") != -1:
                storage_array.append(line[:7].strip())  # get actual device name
                break
        if not storage_array:
            print_error("No internal storage found... Please create an issue")
            exit(1)
        elif len(storage_array) != 1:
            for line in storage_array:
                print(line)
            internal_name = input(
                "\033[92m" + 'Multiple storages found, which one should be used?(example: mmcblk0): ' +
                "\033[0m" + "\n").strip()
            if internal_name in storage_array:
                # add /dev/ to device name, if needed
                if not internal_name.startswith("/dev/"):
                    internal_name = f"/dev/{internal_name}"
                print_status(f"{internal_name} selected")
                break
            else:
                print_warning("No such device, please try again")
                continue
        else:
            internal_name = storage_array[0]
            # add /dev/ to device name, if needed
            if not internal_name.startswith("/dev/"):
                internal_name = f"/dev/{internal_name}"
            print_status(f"{internal_name} selected")
            break

    print_status("Preparing to install to internal storage")
    # unmount all internal partitions
    with contextlib.suppress(subprocess.CalledProcessError):
        bash(f"umount -lf {internal_name}*")
    # ask user for final confirmation
    try:
        input("\033[92m" + f"Are you absolutely sure you want to wipe the {internal_name} drive and install Depthboot "
                           f"to it? Enter to continue or Ctrl+C to abort" + "\033[0m")
    except KeyboardInterrupt:
        print_error("\nAborting... No changes were made")
        exit(0)

    # remove pre-existing partition table from internal storage
    bash(f"wipefs -af {internal_name}")

    # format as per depthcharge requirements,
    # READ: https://wiki.gentoo.org/wiki/Creating_bootable_media_for_depthcharge_based_devices
    bash(f"parted -s {internal_name} mklabel gpt")
    bash(f"parted -s -a optimal {internal_name} unit mib mkpart Kernel 1 65")  # kernel partition
    bash(f"parted -s -a optimal {internal_name} unit mib mkpart Kernel 65 129")  # reserve kernel partition
    bash(f"parted -s -a optimal {internal_name} unit mib mkpart Root 129 100%")  # rootfs partition
    bash(f"cgpt add -i 1 -t kernel -S 1 -T 5 -P 15 {internal_name}")  # set kernel flags
    bash(f"cgpt add -i 2 -t kernel -S 1 -T 5 -P 1 {internal_name}")  # set reserve kernel flags

    bash(f"partprobe {internal_name}")  # update kernel partition table on internal device

    internal_rootfs_partuuid = bash(f"blkid -o value -s PARTUUID {internal_name}p3")
    # read root partition mount
    root_part = bash("mount | grep ' / ' | cut -d' ' -f 1")
    current_rootfs_partuuid = bash(f"blkid -o value -s PARTUUID {root_part}")

    # Save current cmdline to a file
    with open("/proc/cmdline", "r") as file:
        current_cmdline = file.read().strip()
    # remove cros_secure kernel flags, as they are added automatically each boot anyway
    current_cmdline = current_cmdline.replace("cros_secure ", "")

    # update rootfs_partuuid in cmdline
    current_cmdline = current_cmdline.replace(current_rootfs_partuuid, internal_rootfs_partuuid)

    temp_cmdline_file = bash("mktemp").strip()
    with open(temp_cmdline_file, "w") as file:
        file.write(current_cmdline)

    print_status(f"New cmdline: {current_cmdline}")

    # Flash current kernel to internal storage
    print_status("Flashing kernel to internal storage")
    bash(f"/usr/lib/eupnea/install-kernel --ignore-reboot --kernel-flags {temp_cmdline_file} --flash-device "
         f"{internal_name}p")
    # Flash reserve kernel partition
    print_status("Flashing reserve kernel to internal storage")
    bash(f"/usr/lib/eupnea/install-kernel --ignore-reboot --kernel-flags {temp_cmdline_file} --flash-device "
         f"{internal_name}p --flash-partition 2")

    print_status("Formatting internal rootfs part")
    # Create rootfs ext4 partition
    bash(f"yes 2>/dev/null | mkfs.ext4 {internal_name}p3")  # 2>/dev/null is to supress yes broken pipe warning

    print_status("Copying rootfs to internal storage")
    mkdir("/mnt/internal", create_parents=True)
    bash(f"mount {internal_name}p3 /mnt/internal")
    # rsync is faster and allows to exclude certain directories
    # do not sync /var/tmp and /var/cache, as they change very rapidly
    # do not sync /proc, /sys, /dev, /run, as they are not real directories
    # those dirs are still recreated empty
    # use os.system to print output to user
    # --info=progress2 is used to show progress bar and --no-inc-recursive is used to show progress bar for all files
    os.system("rsync -aHAXErp --info=progress2 --no-inc-recursive --exclude=/mnt/internal --exclude=/tmp/* "
              "--exclude=/var/tmp/* --exclude=/dev/* --exclude=/sys/* --exclude=/proc/* --exclude=/run/* "
              "--exclude=/var/cache/* --exclude=/lost+found/* / /mnt/internal")

    # set build type to image in depthboot settings
    with open("/mnt/internal/etc/eupnea.json", "r") as settings_file:
        settings = json.load(settings_file)
    settings["install_type"] = "internal"
    with open("/mnt/internal/etc/eupnea.json", "w") as settings_file:
        json.dump(settings, settings_file)
    # enable postinstall service on internal storage
    with contextlib.suppress(subprocess.CalledProcessError):  # generic ISOs do not have this service
        bash("chroot /mnt/internal /bin/bash -c 'systemctl enable eupnea-postinstall.service'")

    with contextlib.suppress(subprocess.CalledProcessError):
        bash("umount -fl /mnt/internal")
    print_header("Installed successfully to internal storage")
    print_header("You can now boot Depthboot from internal storage, by using ctrl+D or selecting 'Boot from internal' "
                 "on the dev screen")
