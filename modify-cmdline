#!/usr/bin/env python3

import os
import sys
import argparse
from functions import *


# parse arguments from the cli.
def process_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-r', '--reset', action="store_true", dest="reset", default=False,
                        help="Reset to default command line")
    parser.add_argument('-p', '--print-current', action="store_true", dest="print_current", default=False,
                        help="Show current command line")
    parser.add_argument("-v", "--verbose", action="store_true", dest="verbose", default=False, help="Print more output")
    return parser.parse_args()


if __name__ == "__main__":
    args = process_args()
    if args.print_current:
        print_header("Current command line: ")
        with open("/proc/cmdline", "r") as file:
            print(file.read())
        exit(1)

    # Restart script as root
    if not os.geteuid() == 0:
        sudo_args = ['sudo', sys.executable] + sys.argv + [os.environ]
        os.execlpe('sudo', *sudo_args)

    install_kernel_packages()

    print_status("Reading partition table")
    partitions = bash("mount | grep ' / ' | cut -d' ' -f 1")
    partitions = partitions[:len(partitions) - 1]  # get device "name"
    if args.reset:
        print_status("Resetting to default command line")
        temp_cmdline = "console=tty1 root=PARTUUID=insert_partuuid i915.modeset=1 rootwait rw fbcon=logo-pos:center," \
                       "logo-count:1"
        rootfs_partuuid = bash(f"blkid -o value -s PARTUUID {partitions}3")  # get partuuid of rootfs
        new_cmdline = temp_cmdline.replace("insert_partuuid", rootfs_partuuid)  # replace PARTUUID in default cmdline
        with open("/tmp/cmdline", "w") as file:
            file.write(new_cmdline + "\n")
    else:
        # Save current cmdline to a file
        with open("/proc/cmdline", "r") as file:
            current_cmdline = file.read().strip()
        with open("/tmp/cmdline", "w") as file:
            file.write(current_cmdline)

        # Prompt user to edit cmdline with a cli text editor
        # Default to nano, fallback to vim or vi
        # bash from functions.py doesn't work interactively -> use os.system
        if path_exists("/usr/bin/nano"):
            os.system("nano /tmp/cmdline")
        elif path_exists("/usr/bin/vim"):
            os.system("vim /tmp/cmdline")
        else:
            os.system("vi /tmp/cmdline")

    # remove cros_secure kernel flags, as its added automatically each boot
    with open("/tmp/cmdline", "r") as file:
        tmp_cmdline = file.read().strip()
    tmp_cmdline = tmp_cmdline.replace("cros_secure ", "")
    with open("/tmp/cmdline", "w") as file:
        file.write(tmp_cmdline)

    print_status("Backing up kernel")
    # Backup old kernel to part 2
    bash(f"dd if={partitions}1 of={partitions}2")  # backup kernel partition to second partition
    bash(f"dd if={partitions}1 of=/tmp/old_kernel")  # for futility
    print_status("Signing new kernel")
    bash("futility vbutil_kernel --repack /tmp/new_kernel --version 1 --keyblock " +
         "/usr/share/vboot/devkeys/kernel.keyblock --signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk " +
         "--oldblob /tmp/old_kernel --config /tmp/cmdline")
    print_status("Flashing new kernel")
    bash(f"dd if=/tmp/new_kernel of={partitions}1")

    print_header("Kernel cmdline modified successfully! Please reboot to use the new cmdline")
    input("\033[92m" + "Press ENTER to reboot or CTRL+C to cancel reboot" + "\033[0m")
    bash("reboot")
