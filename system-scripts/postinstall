#!/usr/bin/env python3
import contextlib
import os
import sys
import json

sys.path.insert(0, "/usr/lib/eupnea")
from functions import *


# Expand root partition to whole drive
def expand_rootfs() -> None:
    with open("/etc/eupnea.json", "r") as file:
        eupnea_settings = json.load(file)
    if eupnea_settings["install_type"] == "image":  # only resize on image installs
        # Gnome auto-mounts internal drives on boot, which might cause partprobe to say:
        # Error: Can't have overlapping partitions.
        # -> unmount internal drive before resizing
        with contextlib.suppress(subprocess.CalledProcessError):  # Linux will obviously fail to unmount the boot drive
            bash("umount -a")
        # read root partition mount
        device = bash("mount | grep ' / ' | cut -d' ' -f 1")[:-1]
        # resize partition
        bash(f'echo ", +" | sfdisk --force -N 3 {device[:-1] if device.endswith("p") else device}')
        # inform kernel of new partition
        bash("partprobe")
        # resize filesystem to new partition
        bash(f"resize2fs {device}3")
        # set install type to direct
        eupnea_settings["install_type"] = "expanded-image"
        with open("/etc/eupnea.json", "w") as file:
            json.dump(eupnea_settings, file)


def device_fixes() -> None:
    """
    This function determines the device and applies specific fixes if needed
    """
    with open("/sys/devices/virtual/dmi/id/product_name", "r") as file:
        product_name = file.read().strip().lower()
    match product_name:
        case "sona" | "laser":
            # Apply fix for display driver
            # TODO: Add multitouch support

            # copy systemd file from config
            cpfile("/etc/eupnea/device-specific/sona_laser/touchscreen-fix.service",
                   "/etc/systemd/system/touchscreen-fix.service")
            # enable service
            bash("systemctl enable touchscreen-fix.service")


def distro_fixes() -> None:
    with open("/etc/eupnea.json", "r") as file:
        eupnea_json = json.load(file)
    match eupnea_json["distro_name"]:
        case "ubuntu":
            if eupnea_json["de_name"] == "deepin":
                # When installing from a chroot the kernel modules are not installed
                # Therefore the modules are installed when booting for the first time
                bash("apt-get install -y ubuntudde-dde")


def set_hostname() -> None:
    # Get the board name from dmi
    with open("/sys/devices/virtual/dmi/id/product_name", "r") as dmi:
        device_board = dmi.read().lower().strip()
    # Set hostname
    bash(f"hostnamectl hostname {device_board}")


if __name__ == "__main__":
    # Elevate script to root
    if os.geteuid() != 0:
        sudo_args = ['sudo', sys.executable] + sys.argv + [os.environ]
        os.execlpe('sudo', *sudo_args)

    set_verbose(True)  # always run verbose

    while True:
        try:
            if bash("systemctl status NetworkManager.service").__contains__("active (running)"):
                sleep(5)  # wait for network service to fully start
                break
            else:
                sleep(2)
        except subprocess.CalledProcessError:
            break  # sddm is not installed

    expand_rootfs()
    device_fixes()
    set_hostname()

    # disable postinstall systemd service
    bash("systemctl disable eupnea-postinstall.service")
