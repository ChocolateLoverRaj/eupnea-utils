#!/usr/bin/env python3


# Sometimes the system update script needs to install/remove a package from a eupnea system. This is not possible
# from within a postinstall script of a package. Therefor a systemd updater script is run, which will wait for the
# packagemanager to finish and then install/remove the necessary packages.

import argparse
import json
import sys
from typing import Tuple

sys.path.insert(0, "/usr/lib/eupnea")
from functions import *


# parse arguments from the cli.
def process_args():
    parser = argparse.ArgumentParser()
    # list of packages to be installed
    parser.add_argument("package_list", nargs="+", help="List of packages to be installed separated by a space."
                                                        " Packages that need to be deleted should be prefixed with '-'")
    parser.add_argument("--distro-only", default="None", help="Exclusive distros on which the packages should be "
                                                              "installed. Comma-separated, without spaces."
                                                              " Other distros will be ignored.")
    return parser.parse_args()


def parse_package_list(packages_raw: list) -> Tuple[list, list]:
    packages_remove = []
    packages_install = []
    for package in packages_raw:
        if package.startswith("-"):
            packages_remove.append(package[1:])
        else:
            packages_install.append(package)
    return packages_install, packages_remove


if __name__ == "__main__":
    set_verbose(True)
    args = process_args()
    distro_only_list = args.distro_only.split(",")
    print(distro_only_list)
    temp_output = parse_package_list(args.package_list)

    if len(temp_output[0]) == 0 and len(temp_output[1]) == 0:
        exit(0)

    # Read distro name
    with open("/etc/eupnea.json") as f:
       distro_name = json.load(f)["distro"]
    # do not install packages if distro is not the one specified
    if distro_name not in distro_only_list:
        print(f"Skipping package installation for {distro_name}.")
        exit(0)
    match distro_name:
        case "debian" | "ubuntu" | "pop-os":
            pkgmngr_sync = "apt-get update -y"
            pkgmngr_install = "apt-get install -y "
            pkgmngr_remove = "apt-get purge -y "
        case "fedora":
            pkgmngr_sync = "dnf update -y --refresh"
            pkgmngr_install = "dnf install -y "
            pkgmngr_remove = "dnf remove -y "
        case "arch":
            pkgmngr_sync = "pacman -Syy --noconfirm"
            pkgmngr_install = "pacman -S --noconfirm "
            pkgmngr_remove = "pacman -R --noconfirm "

    # Wait for package manager to be ready
    while True:
        try:
            bash(pkgmngr_sync)
        except subprocess.CalledProcessError:
            sleep(5)
            continue
        break

    # install packages
    if len(temp_output[0]) > 0:
        print(pkgmngr_install + " ".join(temp_output[0]))

    # remove packages
    if len(temp_output[1]) > 0:
        print(pkgmngr_remove + " ".join(temp_output[1]))
