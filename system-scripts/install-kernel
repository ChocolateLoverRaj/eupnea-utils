#!/usr/bin/env python3

import argparse
import os
import sys

sys.path.insert(0, "/usr/lib/eupnea")
from functions import *


# parse arguments from the cli.
def process_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--kernel-path", dest="kernel_path", help="Full path to kernel image to be installed.")
    parser.add_argument("--read-partition", dest="read_partition", default=1,
                        help="Partition to read kernel from if no kernel path is specified. Defaults to 1")
    parser.add_argument("--read-device", dest="read_device", default="",
                        help="Device to read kernel from if no kernel path is specified. Defaults to currently booted "
                             "device.")
    parser.add_argument("--kernel-flags", dest="kernel_flags", default="/proc/cmdline",
                        help="Kernel flags to be used. Defaults to /proc/cmdline. Must be a full path.")
    parser.add_argument("--flash-partition", dest="flash_partition", default=1,
                        help="Partition to flash kernel to. Defaults to 1")
    parser.add_argument("--flash-device", dest="flash_device",
                        help="Device to flash kernel to. Defaults to currently booted device.")
    parser.add_argument("--ignore-reboot", dest="ignore_reboot", action="store_true",
                        help="Force install kernel without reboot check.")
    return parser.parse_args()


if __name__ == "__main__":
    args = process_args()

    # Check if at least 1 argument is given
    if (
            not args.kernel_path
            and not args.flash_device
            and not args.read_device
            and not args.kernel_flags
            and args.read_partition == 1
            and args.flash_partition == 1
    ):
        print_error("No arguments given. Please specify at least one argument.")
        exit(1)

    # Restart script as root
    if os.geteuid() != 0:
        sudo_args = ['sudo', sys.executable] + sys.argv + [os.environ]
        os.execlpe('sudo', *sudo_args)

    # read reboot_needed file if it exists
    if path_exists("/var/tmp/reboot_needed"):
        with open("/var/tmp/reboot_needed", "r") as f:
            reboot_needed = f.read()
        with open("/proc/sys/kernel/random/boot_id", "r") as f:
            boot_id = f.read()
        if reboot_needed == boot_id:
            print_error("System is pending a reboot. Please reboot before proceeding.")
            if not args.ignore_reboot:
                exit(65)
            else:
                print_warning("Ignoring reboot check.")

    # Exit if running from inside a chroot
    if not path_exists("/proc/mounts"):
        print_warning("Chroot detected: Skipping kernel flashing, please flash manually.")
        exit(0)

    # make tmp location
    temp_dir = bash("mktemp -d")

    # read current device if no device is given
    if not args.read_device:
        args.read_device = bash("mount | grep ' / ' | cut -d' ' -f 1")[:-1]
    else:
        # Fix user passed device name
        if not args.read_device.startswith("/dev/"):
            args.read_device = f"/dev/{args.read_device}"
        if args.read_device[-1].isdigit():  # if device ends with a number, remove it
            args.read_device = args.read_device[:-1]

    # Read current kernel if no kernel file is given
    if not args.kernel_path:
        print_status(f"Reading kernel from {args.read_device} partition {args.read_partition}")
        bash(f"dd if={args.read_device}{args.read_partition} of={temp_dir}/bzImage")
    else:
        cpfile(args.kernel_path, f"{temp_dir}/bzImage")  # Copy image to temporary location
    cpfile(args.kernel_flags, f"{temp_dir}/kernel.flags")  # Write kernel flags to temporary location

    # Depthcharge automatically adds cros_secure to the kernel flags -> remove it
    with open(f"{temp_dir}/kernel.flags", "r") as f:
        flags = f.read().replace("cros_secure", "").strip()
    with open(f"{temp_dir}/kernel.flags", "w") as f:
        f.write(flags)

    # attempt to extract kernel if it's a raw dd
    if Path(f"{temp_dir}/bzImage").stat().st_size > 60000000:
        print_status("Attempting to extract kernel from raw dd")
        bash(f"futility vbutil_kernel --get-vmlinuz {temp_dir}/bzImage "
             f"--vmlinuz-out {temp_dir}/bzImage.raw")
    else:
        cpfile(f"{temp_dir}/bzImage", f"{temp_dir}/bzImage.raw")

    print_status("Signing kernel")
    bash("futility vbutil_kernel --arch x86_64 --version 1 --keyblock /usr/share/vboot/devkeys/kernel.keyblock "
         f"--signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk --bootloader {temp_dir}/kernel.flags "
         f"--config {temp_dir}/kernel.flags --vmlinuz {temp_dir}/bzImage.raw --pack "
         f"{temp_dir}/bzImage.signed")

    print_status("Flashing kernel")
    # Fix user passed device name
    if not args.flash_device.startswith("/dev/"):
        args.flash_device = f"/dev/{args.flash_device}"
    if args.flash_device[-1].isdigit():  # if device ends with a number, remove it
        args.flash_device = args.flash_device[:-1]
    bash(f"dd if={temp_dir}/bzImage.signed of={args.flash_device}{args.flash_partition}")

    # Create reboot_needed file
    with open("/proc/sys/kernel/random/boot_id", "r") as f:
        boot_id = f.read()
    with open("/var/tmp/reboot_needed", "w") as f:
        f.write(boot_id)

    rmdir(f"{temp_dir}")  # delete temp files

    print_status("Kernel flashed successfully!")
